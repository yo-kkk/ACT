<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.act.store.emp.StoreEmpDAO" >
	
	<!-- 근태 sql -->
  	
	
	<!-- 사원등록시 position에서 min_sal가지고 와서, empDTO의 직급 정보를 설정하기 위한 sql -->
	<select id="getPositionInfo" parameterType="int" resultType="com.project.act.models_dto.PositionDTO">
		select name, min_sal
		from position
		where position_code = #{position_code_forminsal}
	</select>
	<select id="getEmpInfo" parameterType="String" resultType="com.project.act.models_dto.EmployeeDTO">
	select e.emp_id,
			e.emp_password,
			e.name,
			e.phone,
			e.address,
			e.birthday,
			e.hire_date,
			e.retire_date,
			e.store_name AS "storeDTO.store_name",
			e.salary,
			p.position_code AS "positionDTO.position_code",
			p.name AS "positionDTO.name",
			s.store_name,
			s.phone,
			s.address,
			s.location,
			s.SUPERVISOR_ID AS "supervisorDTO.emp_id"
	FROM employee e inner join stores s
	  ON e.store_name=s.store_name
		  inner join position p
	  ON e.position_code = p.position_code
	where e.emp_id=#{emp_id}
	</select>
	
	

	<insert id="storeCommuteInsert" parameterType="com.project.act.models_dto.EmployeeDTO">
	 insert into employee 
          (EMP_ID,
             EMP_PASSWORD,
             NAME,
             POSITION_CODE,
             SALARY,
             PHONE,
             ADDRESS,
             BIRTHDAY,
             HIRE_DATE,
             STORE_NAME)
             
      values(TO_CHAR(#{hire_date}, 'yymmdd')||NO_SEQ.NEXTVAL,
               #{emp_password},
               #{name},
               #{positionDTO.position_code},
               #{salary},
               #{phone},
               #{address},
               #{birthday},
               #{hire_date},
               #{storeDTO.store_name} )
	
               
<!-- 	insert into employee  -->
<!--           (EMP_ID, -->
<!--              EMP_PASSWORD, -->
<!--              NAME, -->
<!--              POSITION_CODE, -->
<!--              SALARY, -->
<!--              PHONE, -->
<!--              ADDRESS, -->
<!--              BIRTHDAY, -->
<!--              HIRE_DATE, -->
<!--              STORE_NAME) -->
             
<!--       values(TO_CHAR(#{hire_date}, 'yymmdd')||NO_SEQ.NEXTVAL, -->
<!--                #{emp_password}, -->
<!--                #{name}, -->
<!--                #{positionDTO.position_code}, -->
<!--                #{salary}, -->
<!--                #{phone}, -->
<!--                #{address}, -->
<!--                #{birthday}, -->
<!--                #{hire_date}, -->
<!--                #{storeDTO.store_name} ) -->
		         
		         <selectKey keyProperty="idx" resultType="int" order="AFTER">
		         	SELECT NO_SEQ.CURRVAL  FROM dual
		         </selectKey>
	</insert>
		         
	 <select id="select_store" parameterType="String" resultType="String">
		select store_name
		from stores
		where location=#{location_code}
	</select>
	
	<select id="getcomList" parameterType="map" resultType="com.project.act.models_dto.EmployeeDTO"> 
	SELECT B.*
	FROM   (SELECT rownum as rnum, A.*	
        	FROM   (
					 select e.emp_id,
							e.name AS "name",
							e.position_code AS "positionDTO.position_code",
							p.name AS "positionDTO.name",
							e.address,
							e.birthday,
							e.hire_date,
							e.retire_date,
							e.phone,
							e.store_name AS "storeDTO.store_name",
							e.salary
						from (SELECT *
								FROM employee 
								WHERE name like '%'||#{keyword}||'%' ) e
                        inner join position p
                        on (e.POSITION_CODE = p.POSITION_CODE and e.position_code='6')
                        where e.store_name = #{store_name}
				) A ) B
	WHERE  rnum between #{pageDTO.startNum} and #{pageDTO.endNum} 
	</select>
	
	<select id="getStoreList" parameterType="map" resultType="com.project.act.models_dto.EmployeeDTO">
	   select  store_name AS "storeDTO.store_name",
	   			emp_id
		from	employee
		where emp_id = (select emp_id
							from employee
							where emp_id = #{emp_id})
	</select>
	
	<select id="toca" parameterType="map" resultType="long">
	SELECT count(*)
		FROM employee
		WHERE name like '%'||#{keyword}||'%' AND position_code='6'
		and store_name = #{store_name}
	</select>
	
	
	
	<update id="updateEmpInfo" parameterType="com.project.act.models_dto.EmployeeDTO" >
		UPDATE employee 
			SET  NAME = #{name},
	             SALARY = #{salary},
	             PHONE = #{phone},
	             ADDRESS = #{address}
	        WHERE EMP_ID = #{emp_id}
	</update>

</mapper>


