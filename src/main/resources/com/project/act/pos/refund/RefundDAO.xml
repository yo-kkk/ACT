<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.act.pos.refund.RefundDAO">
	
	<select id="get_transact_list" parameterType="com.project.act.models_dto.TransactDTO" resultType="com.project.act.models_dto.TransactDTO">
	SELECT B.*
	FROM   (SELECT rownum as rnum, A.*	
        	FROM   (
					select transaction_code,trans_date,total_price,payment
					from transact
					where store_name = #{storeDTO.store_name}  
					and refund_yn = 'n'
					order by transaction_code desc  
				) A ) B
	WHERE  rnum between #{pageDTO.startNum} and #{pageDTO.endNum}   	  
	</select>
	
	<select id="get_totalCount" parameterType="String" resultType="long">
	select count(*)
	from transact
	where store_name=#{store_name}
	and refund_yn = 'n'
	</select>
	
	<select id="get_detail" parameterType="long" resultType="com.project.act.models_dto.Transact_detailDTO">
	select 	a.transaction_code AS "transactDTO.transaction_code",
       		a.product_code AS "productDTO.product_code",
       		a.quantity,
       		b.price AS "productDTO.price",
       		c.event_code AS "eventDTO.event_code",
       		c.event_name AS "eventDTO.event_name",
       		c.discount_rate AS "eventDTO.discount_rate"
	from	transact_detail a
	join    product b
	on      (a.product_code = b.product_code)
	join    transact d
	on      (d.transaction_code = a.transaction_code)
	left outer join event c
	on      (a.event_code = c.event_code and
       		 a.product_code = c.product_code and
       		 c.store_name = d.store_name)
	where a.transaction_code= #{transaction_code}
	</select>
	
	<select id="search" parameterType="String" resultType="com.project.act.models_dto.TransactDTO">
	select transaction_code,trans_date,total_price,payment
	from transact
	where transaction_code = #{keyword}
	and store_name = #{store_name}
	and refund_yn = 'n' 	  
	</select>
	
	<update id="update_org" parameterType="com.project.act.models_dto.TransactDTO">	
	update transact
	set refund_yn = 'y',
	    refund_date = #{trans_date}
	where transaction_code = #{transaction_code}	
	
		<selectKey keyProperty="total_price" order="AFTER" resultType="long" >
		select total_price from transact where transaction_code=#{transaction_code}
		</selectKey>
	
	</update>
	
	<insert id="insert_new" parameterType="com.project.act.models_dto.TransactDTO">	
	
		<selectKey keyProperty="payment" order="BEFORE" resultType="String" >
		select payment from transact where transaction_code=#{transaction_code}
		</selectKey>
	
	insert into transact(transaction_code,store_name,payment,trans_date,refund_yn,total_price,casher_id)
	values('r_'||#{transaction_code},#{storeDTO.store_name},#{payment},#{trans_date},'r',#{total_price}*(-1),#{casher_id})		
	</insert>
	
	<select id="get_refund_list" parameterType="com.project.act.models_dto.TransactDTO" resultType="com.project.act.models_dto.TransactDTO">
	SELECT B.*
	FROM   (SELECT rownum as rnum, A.*	
        	FROM   (
					select transaction_code,trans_date,total_price,refund_date,payment
					from transact
					where store_name = #{storeDTO.store_name}  
					and refund_yn = 'y'
					order by transaction_code desc  
				) A ) B
	WHERE  rnum between #{pageDTO.startNum} and #{pageDTO.endNum} 	  
	</select>
	
	<select id="totalCount_refundList" parameterType="String" resultType="long">
	select count(*)
	from transact
	where store_name = #{store_name}  
	and refund_yn = 'y'
	</select>
	
	<select id="search_refund_list" parameterType="String" resultType="com.project.act.models_dto.TransactDTO">
	select transaction_code,trans_date,total_price,refund_date,payment
	from transact
	where transaction_code= #{keyword}
	and refund_yn = 'y' 	  
	</select>
	
	
	
</mapper>